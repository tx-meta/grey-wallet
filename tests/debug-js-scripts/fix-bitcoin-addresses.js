/**
 * Fix Bitcoin addresses in database
 * This script identifies and potentially fixes invalid Bitcoin addresses
 */

const { PrismaClient } = require('@prisma/client');

function isValidBitcoinAddress(address) {
  // Check for minimum length and basic format
  if (!address || address.length < 26 || address.length > 62) {
    return false;
  }

  // Basic Bitcoin address validation
  // Mainnet addresses: Legacy (1...), SegWit (3...), Bech32 (bc1...)
  // Testnet addresses: Legacy (m..., n...), SegWit (2...), Bech32 (tb1...)
  const mainnetRegex = /^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$|^bc1[a-z0-9]{39,59}$/;
  const testnetRegex = /^[mn2][a-km-zA-HJ-NP-Z1-9]{25,34}$|^tb1[a-z0-9]{39,59}$/;
  
  return mainnetRegex.test(address) || testnetRegex.test(address);
}

async function fixBitcoinAddresses() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç Checking Bitcoin addresses in database...');
    
    // Find all BTC addresses
    const btcAddresses = await prisma.userAddress.findMany({
      where: {
        wallet: {
          tokenSymbol: 'BTC'
        }
      },
      include: {
        user: {
          select: { id: true, email: true }
        },
        wallet: {
          select: { tokenSymbol: true, network: true }
        }
      }
    });
    
    console.log(`üìä Found ${btcAddresses.length} BTC addresses to check:`);
    
    let validCount = 0;
    let invalidCount = 0;
    const invalidAddresses = [];
    
    for (const addr of btcAddresses) {
      const isValid = isValidBitcoinAddress(addr.address);
      
      if (isValid) {
        validCount++;
        console.log(`‚úÖ Valid: ${addr.address} (${addr.user.email})`);
      } else {
        invalidCount++;
        invalidAddresses.push(addr);
        console.log(`‚ùå Invalid: ${addr.address} (${addr.user.email}) - Length: ${addr.address.length}`);
      }
    }
    
    console.log(`\nüìà Summary:`);
    console.log(`  Valid addresses: ${validCount}`);
    console.log(`  Invalid addresses: ${invalidCount}`);
    
    if (invalidCount > 0) {
      console.log(`\nüîß Invalid addresses found:`);
      invalidAddresses.forEach((addr, index) => {
        console.log(`  ${index + 1}. User: ${addr.user.email}`);
        console.log(`     Address: ${addr.address}`);
        console.log(`     Length: ${addr.address.length}`);
        console.log(`     User ID: ${addr.user.id}`);
        console.log('');
      });
      
      console.log('‚ö†Ô∏è  These addresses need to be regenerated using proper Bitcoin derivation.');
      console.log('‚ö†Ô∏è  The system should use BitcoinDerivationStrategy, not MockCryptoService.');
    }
    
    // Check if we're using mock services
    const mockIndicators = btcAddresses.filter(addr => 
      addr.address.startsWith('bc1') && addr.address.length < 40
    );
    
    if (mockIndicators.length > 0) {
      console.log('\nüö® WARNING: Some addresses look like they were generated by MockCryptoService');
      console.log('   Make sure the system is using real derivation strategies in production!');
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

fixBitcoinAddresses();
