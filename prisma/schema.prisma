// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

/// @seed="npx ts-node src/infrastructure/database/seed.ts"

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id              String   @id @default(uuid())
    email           String   @unique
    phone           String   @unique
    passwordHash    String
    country         String?
    currency        String?
    agreedToTerms   Boolean  @default(false)
    termsVersion    String   @default("0.0.1")
    isEmailVerified Boolean  @default(false)
    isPhoneVerified Boolean  @default(false)
    isActive        Boolean  @default(true)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relations
    userAddresses UserAddress[]
    depositTransactions DepositTransaction[]

    @@map("users")
}

model Wallet {
    walletId      String   @id @default(uuid())
    tokenSymbol   String   @unique // One wallet per token
    walletBalance Float    @default(0)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    // Relations
    userAddresses  UserAddress[]
    AddressCounter AddressCounter[]

    @@map("wallets")
}

model UserAddress {
    id           String   @id @default(uuid())
    userId       String
    walletId     String
    address      String
    tokenBalance Float    @default(0)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // Relations
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    wallet Wallet @relation(fields: [walletId], references: [walletId], onDelete: Cascade)

    @@unique([userId, walletId])
    @@map("user_addresses")
}

model SupportedToken {
    tokenId   String   @id @default(uuid())
    name      String
    symbol    String   @unique
    icon      String
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    Transaction Transaction[]

    @@map("supported_tokens")
}

model Transaction {
    transactionId        String   @id @default(uuid())
    transactionDirection String
    paymentType          String
    from                 String
    to                   String
    amount               Float
    tokenId              String?
    status               String   @default("pending")
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt

    // New fields for crypto purchases
    userId             String?
    transactionType    String? // ON_RAMP, OFF_RAMP, PAYMENT, TRANSFER
    tokenSymbol        String?
    fiatAmount         Float?
    cryptoAmount       Float?
    exchangeRate       Float?
    platformFee        Float?
    totalAmount        Float?
    phoneNumber        String?
    checkoutRequestId        String?
    merchantRequestId        String?
    originatorConversationId String?
    mpesaReceiptNumber       String?
    transactionDate          DateTime?

    // Relations
    supportedToken SupportedToken? @relation(fields: [tokenId], references: [tokenId])
    treasuryTransactions TreasuryTransaction[]

    @@map("transactions")
}

model TransactionDirection {
    id    String @id @default(uuid())
    name  String @unique
    label String

    @@map("transaction_directions")
}

model PaymentType {
    id    String @id @default(uuid())
    name  String @unique
    label String

    @@map("payment_types")
}

model AddressCounter {
    walletId  String
    nextIndex Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    wallet Wallet @relation(fields: [walletId], references: [walletId], onDelete: Cascade)

    @@id([walletId])
    @@map("address_counters")
}

model TermsOfService {
    tosVersion Int      @id @default(autoincrement()) @map("tos_version")
    terms      String
    createdAt  DateTime @default(now()) @map("created_at")

    @@map("terms_of_service")
}

model TreasuryAccount {
  id              String   @id @default(uuid())
  accountType     String   // 'CRYPTO' or 'FIAT'
  assetSymbol     String   // 'BTC', 'ETH', 'KES', 'USD'
  balance         Decimal  @default(0) @db.Decimal(20, 8)
  reservedBalance Decimal  @default(0) @db.Decimal(20, 8)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  treasuryTransactions TreasuryTransaction[]

  @@unique([accountType, assetSymbol])
  @@map("treasury_accounts")
}

model TreasuryTransaction {
  id                  String   @id @default(uuid())
  userTransactionId   String?
  treasuryAccountId   String
  transactionType     String   // 'ON_RAMP', 'OFF_RAMP', 'PAYMENT'
  amount              Decimal  @db.Decimal(20, 8)
  balanceBefore       Decimal  @db.Decimal(20, 8)
  balanceAfter        Decimal  @db.Decimal(20, 8)
  description         String?
  createdAt           DateTime @default(now())

  // Relations
  treasuryAccount TreasuryAccount @relation(fields: [treasuryAccountId], references: [id])
  userTransaction Transaction?    @relation(fields: [userTransactionId], references: [transactionId])

  @@map("treasury_transactions")
}

model DepositTransaction {
  id                String   @id @default(uuid())
  userId            String
  userAddress       String   // The user's deposit address
  tokenSymbol       String
  amount            Decimal  @db.Decimal(20, 8)
  txHash            String   @unique // Blockchain transaction hash
  blockNumber       BigInt?
  fromAddress       String   // External sender's address
  confirmations     Int      @default(0)
  status            String   @default("pending") // pending, confirmed, failed
  detectedAt        DateTime @default(now())
  confirmedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("deposit_transactions")
}

model BlockchainMonitor {
  id            String   @id @default(uuid())
  tokenSymbol   String   @unique
  lastBlock     BigInt   @default(0)
  isActive      Boolean  @default(true)
  lastCheckedAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("blockchain_monitors")
}
